on: [push]
name: Haskell Builds
jobs:
  build:
    name: Haskell Build
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc-version:
          - '9.8'
          - '9.10'
        cabal-version: ['3.12.1.0']
    steps:
      # Checkout
      - uses: actions/checkout@v3
        
      # Setup
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup
        if: steps.tooling-cache.outputs.cache-hit != 'true'
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      # Generate Plan
      - name: Configure the Build
        run: |
          rm cabal.project.freeze
          # We can't run tests in this project because testing requires
          # Elm to be installed.
          cabal configure
          cabal build --dry-run

      # Restore cache
      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}

      # Build deps (for caching)
      - name: Cabal build dependencies
        run: cabal build all --only-dependencies

      # Save dependency cache
      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      # Cabal build
      - name: Cabal Bulid
        run: |
          cabal build all

  build-lower-bounds:
    name: Haskell Build (lower bounds)
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc-version: ['9.8.1']
        cabal-version: ['3.10.2.0']
    steps:
      # Checkout
      - uses: actions/checkout@v3
        
      # Setup
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup
        if: steps.tooling-cache.outputs.cache-hit != 'true'
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      # Generate Plan
      - name: Configure the Build
        run: |
          (cat << EOF
          packages: .
          constraints:
            aeson == 2.2.1.0,
            base == 4.19.0.0,
            binary == 0.8.9.1,
            bound == 2.0.7,
            bytestring == 0.12.0.2,
            containers == 0.6.8,
            cookie == 0.4.6,
            directory == 1.3.8.1,
            elm-syntax == 0.3.3.0,
            filepath == 1.4.200.1,
            hspec == 2.11.1,
            http-types == 0.12.3,
            json-spec == 0.3.0.0,
            json-spec-elm == 0.4.0.0,
            mtl == 2.3.1,
            prettyprinter == 1.7.1,
            process == 1.6.18.0,
            servant == 0.20.1,
            text == 2.1,
            time == 1.12.2,
            unordered-containers == 0.2.19.1,
            uuid == 1.3.15
          EOF
          ) > cabal.project
          rm cabal.project.freeze
          # We can't run tests in this project because testing requires
          # Elm to be installed.
          cat cabal.project
          cabal configure
          cabal build --dry-run

      # Restore cache
      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}

      # Build deps (for caching)
      - name: Cabal build dependencies
        run: cabal build all --only-dependencies

      # Save dependency cache
      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      # Cabal Build
      - name: Cabal Bulid
        run: cabal build all


